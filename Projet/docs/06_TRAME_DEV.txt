// TRAME DU CODE - Dream Island //

**Param√®tres g√©n√©raux**

- Taille de l‚Äô√Æle : 30 colonnes √ó 14 lignes ‚Üí 420 cases
- Taille d‚Äôune case / tile : 16√ó16 px

---

**1Ô∏è‚É£ Cr√©ation de la carte**

*Objectif :* Cr√©er la grille 2D repr√©sentant l‚Äô√Æle, g√©rer placement et suppression des b√¢timents.

**T√¢ches d√©taill√©es :**

1. Cr√©er la classe `Island` :
   * Attributs : largeur, hauteur, grille 2D
   * M√©thodes : `placer_batiment()`, `supprimer_batiment()`, `case_libre()`

2. G√©rer les **contraintes de placement** :

   * V√©rifier les cases adjacentes pour les b√¢timents interdits √† proximit√©. (VOIR DOC : 03_BATIMENTS_CARACTERISTIQUES)
   * Si placement impossible ‚Üí renvoyer notification √† l‚Äôutilisateur.

3. Stocker la position des b√¢timents pour sauvegarde JSON.
4. Tester le placement et la suppression ‚Üí aucune case chevauch√©e, contraintes respect√©es.

**R√©f√©rence documents :** `03_BATIMENTS.txt`, `01_GAMEPLAY.txt`

---
 
**2Ô∏è‚É£ D√©finition et gestion des b√¢timents ** 

*Objectif :* Cr√©er tous les b√¢timents avec leurs effets et r√®gles de placement.

**T√¢ches d√©taill√©es :**

1. Cr√©er la classe `Building` :

   * Attributs : nom, cat√©gorie, co√ªt, effets sur üíµ/‚ò£Ô∏è/üå±/üòä/üë•, niveau requis, capacit√© si n√©cessaire, liste de b√¢timents interdits √† c√¥t√©.

2. Cr√©er tous les b√¢timents du tableau fourni (Maison, Immeuble, Villa, Usine, Parc, etc.).
3. Ajouter logique pour b√¢timents sp√©ciaux : Bidonville, D√©charge 
4. Tester que chaque b√¢timent applique correctement ses effets et respecte les contraintes spatiales.

**R√©f√©rence documents :** `03_BATIMENTS.txt`

---

**3Ô∏è‚É£ Gestion des indicateurs en temps r√©el** 

*Objectif :* Mettre √† jour üíµ, ‚ò£Ô∏è, üå±, üòä, üë• √† chaque tick (ex: 1 sec).

**T√¢ches d√©taill√©es :**

1. Cr√©er la classe `Game` :

   * Boucle principale et tick r√©gulier
   * Mise √† jour des indicateurs selon b√¢timents et √©v√©nements

2. Impl√©menter **formules de calcul** :

   * Population ‚Üí logement + bonheur
   * Bonheur ‚Üí influence sur population et √©conomie
   * Pollution / biodiversit√© ‚Üí influence b√¢timents et √©v√©nements

3. G√©rer interactions indicateurs (ex : pollution trop √©lev√©e ‚Üí baisse bonheur).
4. Tester que les indicateurs se recalculent correctement apr√®s chaque action.

**R√©f√©rence documents :** `01_GAMEPLAY.txt`

---

**4Ô∏è‚É£ Syst√®me d‚Äô√©v√©nements al√©atoires** 

*Objectif :* G√©n√©rer des √©v√©nements positifs, n√©gatifs ou neutres.

**T√¢ches d√©taill√©es :**

1. Cr√©er la classe `Event` : nom, type, effets sur indicateurs, dur√©e.
2. D√©finir fr√©quence et conditions de d√©clenchement :

   * Fr√©quence : toutes les 5 minutes
   * Conditions : pollution > seuil, manque de logements, etc.
3. Faire remonter les √©v√©nements via **notifications** dans l‚Äôinterface.
4. Tester impact sur indicateurs et interactions cumul√©es.

**R√©f√©rence documents :** `01_GAMEPLAY.txt`

---

**5Ô∏è‚É£ Interface utilisateur Pyxel **

*Objectif :* Afficher carte, b√¢timents, indicateurs et boutons.

**T√¢ches d√©taill√©es :**

1. Cr√©er la classe `Interface`.
2. Affichage carte : chaque case = 16√ó16 px, sprite correspondant au b√¢timent.
3. Barre lat√©rale gauche :

   * Afficher indicateurs üíµ, ‚ò£Ô∏è, üå±, üòä, üë•
   * Boutons : Info, Boutique, Poubelle

4. Fen√™tres contextuelles :

   * Infos b√¢timent s√©lectionn√©
   * Notifications √©v√©nements
   * Boutons construire/d√©truire

5. Feedback imm√©diat : changements d‚Äôindicateurs apparaissent instantan√©ment.
6. Tester toutes les interactions : clic b√¢timent, boutons, suppression, achat.

**R√©f√©rence documents :** `01_GAMEPLAY.txt`, `03_BATIMENTS.txt`

---

**6Ô∏è‚É£ Boutique et achat / vente **

**T√¢ches d√©taill√©es :**

1. Affichage de tous les b√¢timents disponibles.
2. V√©rifier argent et niveau requis ‚Üí griser les b√¢timents non accessibles.
3. Appliquer effets sur indicateurs apr√®s achat.
4. Mise √† jour interface apr√®s transaction.

**R√©f√©rence documents :** `03_BATIMENTS.txt`

---

**7Ô∏è‚É£ Sauvegarde et chargement JSON **

**T√¢ches d√©taill√©es :**

1. Cr√©er classe `SaveLoad`.
2. Sauvegarder :

   * Liste b√¢timents et positions
   * Indicateurs actuels
   * Niveau / progression joueur
   * √âv√©nements actifs
3. Charger JSON pour reprendre la partie.
4. Tester plusieurs sauvegardes / chargements ‚Üí tout restaur√© correctement.

**R√©f√©rence documents :** `01_GAMEPLAY.txt`, `04_SYSTEME.txt`

---

**8Ô∏è‚É£ Syst√®me de niveaux et progression**

**T√¢ches d√©taill√©es :**

1. D√©finir paliers de progression (population, argent, bonheur).
2. D√©bloquer b√¢timents et fonctionnalit√©s selon niveau.
3. Afficher alertes dans barre lat√©rale si nouveaux b√¢timents disponibles.
4. Tester que chaque palier se d√©clenche correctement.

**R√©f√©rence documents :** `03_BATIMENTS.txt`

---

Trouver aussi des sprites/tiles pour √©viter d'avoir √† dessiner tout par nous m√™me


